diff --git storage/innobase/buf/buf0buf.cc storage/innobase/buf/buf0buf.cc
index e8e9dd3..3b8ea19 100644
--- storage/innobase/buf/buf0buf.cc
+++ storage/innobase/buf/buf0buf.cc
@@ -66,6 +66,11 @@ Created 11/5/1995 Heikki Tuuri
 #include "buf0dump.h"
 #include <map>
 #include <sstream>
+#include <mutex>
+#include <vector>
+#include <thread>
+#include <unistd.h>
+#include <condition_variable>
 
 #ifdef HAVE_LIBNUMA
 #include <numa.h>
@@ -1548,6 +1553,147 @@ buf_block_init(
 	ut_ad(rw_lock_validate(&(block->lock)));
 }
 
+
+/* 
+thread-only queue
+only one thread enqueue, multi thread dequeue
+*/
+template<typename T>
+class my_queue{
+private:
+	bool signal;
+	const ulint QUEUE_SIZE;
+	ulint front;
+	ulint rear;
+	std::vector<T> queue;
+	std::vector<ulint> flag;
+public:
+	my_queue():signal(false), QUEUE_SIZE(10000), front(0), rear(0){
+		queue.assign(QUEUE_SIZE, 0);
+		flag.assign(QUEUE_SIZE, 0);
+	}
+	void enqueue(T data){
+		ulint myrear = rear++;
+		queue[myrear % QUEUE_SIZE] = data;
+		flag[myrear % QUEUE_SIZE]++;
+	}
+	T dequeue(){
+		ulint myfront = __sync_fetch_and_add(&front, 1);
+		ulint myflag;
+		while(1){
+			if(signal) return NULL; 
+			if(myfront >= rear) {
+				front = rear;
+				return NULL;
+			}
+			myflag = flag[myfront % QUEUE_SIZE];
+			if(myflag % 2 == 1 && myfront / QUEUE_SIZE == myflag / 2) break;
+			else std::this_thread::yield();
+		}
+		flag[myfront % QUEUE_SIZE]++;
+
+		return queue[myfront % QUEUE_SIZE];
+	}
+	bool empty(){
+		return (rear == front);
+	}
+	void exit_loop(){
+		signal = true;
+	}
+};
+
+
+
+class my_thread_pool{
+private:
+	// thread's work
+	typedef struct job{
+		void (*work)(void *);
+		void * arg;
+	} Job;
+	int size;
+	bool is_active;
+	bool is_live;
+	ulint flag;
+	ulint cur_flag;
+	std::vector<std::thread> pool;
+	my_queue<Job*>* task_queue;
+	
+public:
+	void working(int id){
+		while(1){
+			if(!is_live) break;
+			
+			if(!is_active){
+				std::this_thread::yield();
+				continue;
+			}
+
+			Job* job = task_queue->dequeue();
+			
+			if(job == NULL){
+				flag |= (1 << id);
+				std::this_thread::yield();
+				continue;
+			}
+			
+			job->work(job->arg);
+			delete job;
+			
+		}
+	}
+	my_thread_pool(int size):size(size), is_active(false), is_live(true), flag(0){
+		cur_flag = (ulint)((1LL << size) - 1);
+		task_queue = new my_queue<Job*>();
+		for(int i = 0; i < size; ++i){
+			pool.emplace_back(&my_thread_pool::working, this, i);
+		}
+	}
+	~my_thread_pool(){
+		is_live = false;
+		task_queue->exit_loop();
+		for(int i = 0; i < size; ++i){
+			pool[i].join();
+		}
+		delete task_queue;
+	}
+	
+	void main_sleep(){
+		flag = 0;
+		is_active = true;
+		while(flag < cur_flag)
+			std::this_thread::yield();
+		is_active = false;
+	}
+
+	void push_task(void (*func)(void *), void * arg){
+		Job *job = new Job();
+		job->work = func;
+		job->arg = arg;
+		task_queue->enqueue(job);
+	}
+};
+
+my_thread_pool* my_pool;
+
+typedef struct data{
+	buf_pool_t* buf_pool;
+	buf_block_t* block;
+	byte* frame;
+} Data;
+
+std::mutex buf_chunk_mutex;
+
+/* Thread work function */
+void work(void * data){
+	Data * d = (Data*)data;
+	buf_block_init(d->buf_pool, d->block, d->frame);
+	UNIV_MEM_INVALID(d->block->frame, srv_page_size);
+
+	ut_ad(buf_pool_from_block(d->block) == d->buf_pool);
+	free(d);
+}
+
 /********************************************************************//**
 Allocates a chunk of buffer frames.
 @return chunk, or NULL on failure */
@@ -1626,24 +1772,27 @@ buf_chunk_init(
 	memory above). */
 
 	block = chunk->blocks;
+	
+	for(i = chunk->size; i--; ){
+		Data* d = (Data*)malloc(sizeof(Data));
+		d->block = block;
+		d->buf_pool = buf_pool;
+		d->frame = frame;
+		my_pool->push_task(work, (void*)d);
+		block++;
+		frame += srv_page_size;
+	}
 
-	for (i = chunk->size; i--; ) {
-
-		buf_block_init(buf_pool, block, frame);
-		UNIV_MEM_INVALID(block->frame, srv_page_size);
-
-		/* Add the block to the free list */
+	my_pool->main_sleep();
+	
+	block = chunk->blocks;
+	for(i = chunk->size; i--;){
 		UT_LIST_ADD_LAST(buf_pool->free, &block->page);
-
 		ut_d(block->page.in_free_list = TRUE);
-		ut_ad(buf_pool_from_block(block) == buf_pool);
-
 		block++;
-		frame += srv_page_size;
 	}
-
 	buf_pool_register_chunk(chunk);
-
+	
 #ifdef PFS_GROUP_BUFFER_SYNC
 	pfs_register_buffer_block(chunk);
 #endif /* PFS_GROUP_BUFFER_SYNC */
@@ -1859,7 +2008,11 @@ buf_pool_init_instance(
 
 		buf_pool->curr_size = 0;
 		chunk = buf_pool->chunks;
-
+		
+		ulint thread_num = sysconf(_SC_NPROCESSORS_ONLN);
+		thread_num = thread_num == 1 ? 1 : (thread_num - 1);
+		my_pool = new my_thread_pool((int)thread_num);
+		
 		do {
 			if (!buf_chunk_init(buf_pool, chunk, chunk_size)) {
 				while (--chunk >= buf_pool->chunks) {
@@ -1880,7 +2033,7 @@ buf_pool_init_instance(
 
 			buf_pool->curr_size += chunk->size;
 		} while (++chunk < buf_pool->chunks + buf_pool->n_chunks);
-
+		delete my_pool;
 		buf_pool->instance_no = instance_no;
 		buf_pool->read_ahead_area =
 			ut_min(BUF_READ_AHEAD_PAGES,
diff --git storage/innobase/include/ut0lst.h storage/innobase/include/ut0lst.h
index 9a5f305..ce9a2ee 100644
--- storage/innobase/include/ut0lst.h
+++ storage/innobase/include/ut0lst.h
@@ -156,7 +156,6 @@ ut_list_prepend(
 	if (list.start != 0) {
 		typename List::node_type&	base_node =
 			list.start->*list.node;
-
 		ut_ad(list.start != elem);
 
 		base_node.prev = elem;
diff --git storage/innobase/srv/srv0start.cc storage/innobase/srv/srv0start.cc
index 3ea2f96..8e722d6 100644
--- storage/innobase/srv/srv0start.cc
+++ storage/innobase/srv/srv0start.cc
@@ -100,7 +100,7 @@ Created 2/16/1996 Heikki Tuuri
 #include "zlib.h"
 #include "ut0crc32.h"
 #include "btr0scrub.h"
-
+#include <chrono>
 /** Log sequence number immediately after startup */
 lsn_t	srv_start_lsn;
 /** Log sequence number at shutdown */
@@ -1403,9 +1403,10 @@ dberr_t srv_start(bool create_new_db)
 	ib::info() << "Initializing buffer pool, total size = "
 		<< size << unit << ", instances = " << srv_buf_pool_instances
 		<< ", chunk size = " << chunk_size << chunk_unit;
-
+	std::chrono::system_clock::time_point start = std::chrono::system_clock::now();
 	err = buf_pool_init(srv_buf_pool_size, srv_buf_pool_instances);
-
+	std::chrono::duration<double> end = std::chrono::system_clock::now() - start;
+	ib::info() << "@@@@@@@@@ time : " << end.count() << " @@@@@@@@@";
 	if (err != DB_SUCCESS) {
 		ib::error() << "Cannot allocate memory for the buffer pool";
 
